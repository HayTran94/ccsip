#!KAMAILIO
#
# sample config file for dispatcher module
# - load balancing of VoIP calls with round robin
# - no TPC listening
# - don't dispatch REGISTER and presence requests
#
# Actually for:
# Kamailio (OpenSER) SIP Server v4.1 - default configuration script
#
# From sample @ http://kamailio.org/docs/modules/4.1.x/modules/dispatcher.html#idp1879032
# Which was based on:
# Kamailio (OpenSER) SIP Server v3.2
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: sr-users@lists.sip-router.org
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#     - define WITH_DEBUG
#

#!ifndef DBURL
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!endif

####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

# log_facility=LOG_LOCAL0

fork=yes
children=4

/* comment the next line to enable TCP */
disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on revers DNS on IPs (default on) */
auto_aliases=no

/* add local domain aliases */
# alias="mysipserver.com"
alias=ccsip-kamailio-0.open-cc.org
alias="${EXTERNAL_ADDR}"

port=5060

advertised_address="${EXTERNAL_ADDR}"

/* uncomment and configure the following line if you want Kamailio to
   bind on a specific interface/port/proto (default bind on all available) */
# listen=udp:127.0.0.1:5060

sip_warning=no

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/lib64/kamailio/modules/"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "db_text.so"

loadmodule "exec.so"

loadmodule "jsonrpcs.so"

loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"

loadmodule "usrloc.so"
loadmodule "registrar.so"

loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "acc.so"
loadmodule "dispatcher.so"

loadmodule "auth.so"
loadmodule "auth_db.so"

loadmodule "cfgutils.so"

# ----------------- setting module-specific parameters ---------------

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

# ----- db_text params -----
modparam("usrloc", "db_mode", 0)
modparam("usrloc|auth_db", "db_url", "text:///tmp/opensipsdb")

# -- auth params --
#
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "user_column", "username")
modparam("auth_db", "domain_column", "domain")

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
#modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- acc params -----
modparam("acc", "log_flag", 1)
modparam("acc", "failed_transaction_flag", 3)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;src_ip=$si")

# ----- tm params -----
modparam("tm", "fr_timer", 2000)
modparam("tm", "fr_inv_timer", 40000)

# ----- dispatcher params -----
# modparam("dispatcher", "db_url", DBURL)
# modparam("dispatcher", "table_name", "dispatcher")

modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")

modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 15)
modparam("dispatcher", "ds_probing_threshold", 1)
modparam("dispatcher", "ds_ping_reply_codes", "class=2;class=3;class=4")


####### Routing Logic ########

# main request routing logic

route {

    set_advertised_address("${EXTERNAL_ADDR}");

    exec_msg("curl -s -H 'Content-Type: application/json' -d '{\"method\":\"$rm\",\"caller\":\"$fU\",\"callee\":\"$rU\",\"timestamp\":\"$Ts\",\"body\":\"$(rb{s.encode.base64})\",\"expires\":\"$hdr(Expires)\",\"callID\":\"$hdr(Call-ID)\"}' http://kamailio_event_adapter:9992/api/broadcast/kamailio-events/1 &");

    xlog("L_INFO", "incoming ru: $ru rm: $rm du: $du cs: $cs ct: $ct\n");

    if (is_method("REGISTER")) {
        if (!www_authorize("ccsip-kamailio-0.open-cc.org", "subscriber")) {
            www_challenge("ccsip-kamailio-0.open-cc.org", "0");
            exit;
        }
        if ($au!=$tU) {
            sl_send_reply("403","Forbidden auth ID");
            exit;
        }
    }

    if (method=="REGISTER") {
        sl_send_reply("100", "Trying");
        if (!save("location")) {
            sl_reply_error();
        } else {
            xlog("L_INFO", "register success - ct: $ct\n");
            exec_msg("curl -s -H 'Content-Type: application/json' -d '{\"method\":\"REGISTER_SUCCESS\",\"caller\":\"$fU\",\"callee\":\"$rU\",\"timestamp\":\"$Ts\",\"body\":\"$(rb{s.encode.base64})\",\"expires\":\"$hdr(Expires)\",\"callID\":\"$hdr(Call-ID)\"}' http://kamailio_event_adapter:9992/api/broadcast/kamailio-events/1 &");
        }
        exit;
    }

    if($ru=="sip:kamailio" && is_method("OPTIONS")) {
        xlog("L_INFO", "$ru up and running self\n");
        sl_send_reply("200","Up and running");
        exit;
    }

    if($ru=="sip:asterisk" && is_method("OPTIONS")) {
        xlog("L_INFO", "$ru up and running self\n");
        sl_send_reply("200","Up and running");
        exit;
    }

	# per request initial checks
	route(REQINIT);

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE"))
		record_route_advertised_address("${EXTERNAL_ADDR}:5060");

	# account only INVITEs
	if (is_method("INVITE"))
	{
		setflag(1); # do accounting
		if(lookup("location")) {
		    route(RELAY);
		}
	}

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null)
	{
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

    route(DISPATCH);
}


route[RELAY] {
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(1); # do accounting ...
				setflag(3); # ... even if the transaction fails
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri==myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK;
					# must be ACK after a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard.
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	if(!is_method("REGISTER"))
		return;
	xlog("REGISTRATION BLOCKED\n");
	sl_send_reply("404", "No registrar");
	exit;
}

# Presence server route
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;
	sl_send_reply("404", "Not here");
	exit;
}

# Dispatch requests
route[DISPATCH] {
	# round robin dispatching on gateways group '1'

    if($rU!="${SIP_TERMINATION_PHONE_NUMBER}") {
        xlog("L_ERR", "ignoring call to $ru\n");
        send_reply("404", "No destination");
        exit;
    }

    exec_avp("curl -s 'http://$PRIVATE_ADDR/route?callID=$ci&from=$(fu{s.encode.base64})&dest=$(ru{s.encode.base64})'", "$avp(s:output)");

    xlog("L_INFO", "route result: $avp(s:output)\n");

    if($avp(s:output)=="queue") {
        if(!ds_select_dst("1", "4")) {
            send_reply("404", "No destination");
            exit;
        }
    } else {
        # $du = "sip:" + $avp(s:output);
        # $du = "sip:+6105877376@" + $dd;
        # $ru="sip:+4849862096@${EXTERNAL_ADDR}:5060";
        # $ru="sip:signaling-proxy@${EXTERNAL_ADDR}:5060";
        # $ru="sip:" + $rU + "@${EXTERNAL_ADDR}:5060";
        $avp(ruholder) = $ru;
        $ru="sip:" + $avp(s:output) + "@ccsip-kamailio-0.open-cc.org";
        if(!lookup("location")) {
            xlog("L_ERR", "location not found for $ru - resetting to $avp(s:ruholder)\n");
            $ru=$avp(s:ruholder);
            # TODO remove this duplication
            if(!ds_select_dst("1", "4")) {
                send_reply("404", "No destination");
                exit;
            } else {
                xlog("L_ERR", "found new loc $du\n");
            }
        }
    }
    xlog("L_INFO", "dispatching $ru to $du\n");
	t_set_fr(0,2000);
	t_on_failure("RTF_DISPATCH");
	route(RELAY);
	#forward();
	exit;
}

# Sample failure route
failure_route[RTF_DISPATCH] {
	if (t_is_canceled()) {
		exit;
	}
	# next DST - only for 500 or local timeout
	if (t_check_status("500")
			or (t_branch_timeout() and !t_branch_replied()))
	{
		if(ds_next_dst())
		{
			t_on_failure("RTF_DISPATCH");
			route(RELAY);
			exit;
		}
	}
}